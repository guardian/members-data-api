package services

import akka.actor.ActorSystem
import com.amazonaws.regions.Regions
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClientBuilder
import com.gu.memsub.subsv2.SubscriptionPlan.AnyPlan
import components.TouchpointComponents
import models.Attributes
import org.specs2.concurrent.ExecutionEnv
import org.specs2.mutable.Specification
import play.api.libs.json.Json
import services.SupporterProductDataIntegrationTest.ids

import scala.concurrent.Future

class SupporterProductDataIntegrationTest(implicit ee: ExecutionEnv) extends Specification {

  val stage = "PROD"
  lazy val dynamoClientBuilder: AmazonDynamoDBAsyncClientBuilder = AmazonDynamoDBAsyncClientBuilder.standard().withCredentials(com.gu.aws.CredentialsProvider).withRegion(Regions.EU_WEST_1)
  lazy val mapper = new SupporterRatePlanToAttributesMapper(stage)
  lazy val supporterProductDataTable = "SupporterProductData-PROD"
  lazy val supporterProductDataService = new SupporterProductDataService(dynamoClientBuilder.build(), supporterProductDataTable, mapper)

  lazy val dynamoAttributesTable = "SupporterAttributesFallback-PROD"
  lazy val attrService: AttributeService = new ScanamoAttributeService(dynamoClientBuilder.build(), dynamoAttributesTable)


  implicit private val actorSystem: ActorSystem = ActorSystem()
  lazy val touchpoint = new TouchpointComponents("PROD")
  lazy val attributesFromZuora = new AttributesFromZuora()

  def getFromZuora(identityId: String) = {
    attributesFromZuora.getAttributesFromZuoraWithCacheFallback(
      identityId,
      identityIdToAccounts = touchpoint.zuoraRestService.getAccounts,
      subscriptionsForAccountId = accountId => reads => touchpoint.subService.subscriptionsForAccountId[AnyPlan](accountId)(reads),
      giftSubscriptionsForIdentityId = touchpoint.zuoraRestService.getGiftSubscriptionRecordsFromIdentityId,
      dynamoAttributeService = attrService,
      paymentMethodForPaymentMethodId = paymentMethodId => touchpoint.zuoraRestService.getPaymentMethod(paymentMethodId.get),
      supporterProductDataService = touchpoint.supporterProductDataService
    )
  }


  def compareLists(fromDynamo: List[Option[Attributes]], fromSupporterProductData:  List[Option[Attributes]]) =
  fromDynamo.zip(fromSupporterProductData).flatMap { case (dynamo, supporter) =>
    if (AttributesFromZuora.attributesDoNotMatch(dynamo, supporter)) {
      System.out.println(
        s"""{"zuora": ${Json.toJson(dynamo)},\n""" +
        s""""supporter-product-data": ${Json.toJson(supporter)}}"""
      )
      Some((dynamo, supporter))
    } else None
  }


  "SupporterProductData" should {
    "match Zuora" in {
      for {
        //fromDynamo <- Future.sequence(ids.map(attrService.get))
        fromZuora <- Future.sequence(ids.map(getFromZuora))
        fromSupporterProductData <- Future.sequence(ids.map(supporterProductDataService.getAttributes))
      } yield {
        //val allMismatched = compareLists(fromDynamo.map(_.map(DynamoAttributes.asAttributes(_, None))), fromSupporterProductData.map(_.getOrElse(None)))
        val allMismatched = compareLists(fromZuora.map(_._2), fromSupporterProductData.map(_.getOrElse(None)))
        System.out.println(s"Original list count: ${ids.length}, mismatched count: ${allMismatched.length}")
        allMismatched should beEmpty
      }
    }
  }
}

object SupporterProductDataIntegrationTest {
  val ids = List(
    // "18259841",
//    "17621312",
//    "17621312",
//    "16096686",
//    "15991523",
//    "15991523",
//    "105313206",
//    "18443134",
//    "18443134",
//    "105214565",
//    "105214565",
//    "4193799",
//    "100840708",
//    "15230337",
//    "11033655",
//    "100234845",
//    "100234845",
//    "104663029",
//    "103204165",
//    "101974012",
//    "105531693",
//    "1667994",
//    "100942275",
//    "100942275",
//    "17761138",
//    "17761138",
    "4386073",
//    "4386073",
//    "17678230",
//    "17678230",
//    "16914045",
//    "2451230",
//    "2451230",
//    "10103539",
//    "15862345",
//    "15862345",
//    "103075536",
//    "103075536",
//    "101944429",
//    "105531715",
//    "4594987",
//    "4594987",
//    "100894730",
//    "16458969",
//    "16458969",
//    "534811",
//    "101367893",
//    "101367893",
//    "103064066",
//    "16749479",
//    "16749479",
//    "102574297",
//    "4311211",
//    "4311211",
//    "105531724",
//    "18322499",
//    "18322499",
//    "101666716",
//    "102163907",
//    "102554752",
//    "102554752",
//    "836432",
//    "836432",
//    "16910974",
//    "16910974",
//    "102375027",
//    "105529826",
//    "18487587",
//    "18487587",
//    "17802210",
//    "17802210",
//    "101411827",
//    "101411827",
//    "12469034",
//    "102298951",
//    "15274682",
//    "18181311",
//    "18181311",
//    "105170890",
//    "101511533",
//    "105388473",
//    "14672651",
//    "1507906",
//    "1507906",
//    "17493974",
//    "17493974",
//    "17845225",
//    "13773031",
//    "13773031",
//    "17122924",
//    "17122924",
//    "12595052",
//    "12595052",
//    "101391382",
//    "101391382",
//    "3649046",
//    "101991956",
//    "101991956",
//    "14093520",
//    "1997943",
//    "4201025",
//    "4201025",
//    "1759005",
//    "14583092",
//    "14583092",
//    "12469034",
//    "11618621",
//    "11618621",
//    "2896985",
//    "2896985",
//    "13786299",
//    "13786299",
//    "17076163",
//    "17957662",
//    "100540174",
//    "102404174",
//    "3176049",
//    "3176049",
//    "16177526",
//    "1667994",
//    "102381457",
//    "102381457",
//    "15642989",
//    "15642989",
//    "17866373",
//    "3119399",
//    "3119399",
//    "104217043",
//    "1935392",
//    "104931238",
//    "100883282",
//    "100883282",
//    "12806799",
//    "12806799",
//    "11991391",
//    "101355608",
//    "105285861",
//    "105285861",
//    "10768895",
//    "2083315",
//    "16341880",
//    "16341880",
//    "13786299",
//    "13786299",
//    "17462206",
//    "16281611",
//    "16281611",
//    "12725675",
//    "12725675",
//    "102759296",
//    "100434839",
//    "100434839",
//    "10708765",
//    "102341228",
//    "12678043",
//    "12678043",
//    "103035840",
//    "17995609",
//    "104424280",
//    "3124742",
//    "105242057",
//    "17315743",
//    "11956247",
//    "104964948",
//    "104964948",
//    "16094653",
//    "18411001",
//    "18411001",
//    "15902172",
//    "17040991",
//    "10984105",
//    "10984105",
//    "103286561",
//    "103286561",
//    "17405776",
//    "17405776",
//    "17937171",
//    "17498853",
//    "100055756",
//    "100055756",
//    "2712425",
//    "2712425",
//    "104521925",
//    "1398070",
//    "105531774",
//    "4265346",
//    "4265346",
//    "101621289",
//    "10996512",
//    "12699545",
//    "13042210",
//    "18007861",
//    "18007861",
//    "17015078",
//    "17015078",
//    "100316155",
//    "100766602",
//    "100766602",
//    "103659275",
//    "101643869",
//    "101643869",
//    "11010052",
//    "11010052",
//    "17227170",
//    "17227170",
//    "1667994",
//    "4020502",
//    "4020502",
//    "4252335",
//    "12839305",
//    "14251617",
//    "14251617",
//    "101771910",
//    "17317655",
//    "100605886",
//    "18450535",
//    "18450535",
//    "17083074",
//    "17083074",
//    "1987399",
//    "1987399",
//    "102038456",
//    "103025208",
//    "3676827",
//    "3676827",
//    "15788155",
//    "15788155",
//    "101534397",
//    "17441415",
//    "17441415",
//    "1902237",
//    "102441784",
//    "18152235",
//    "2530657",
//    "103064066",
//    "104837513",
//    "104837513",
//    "13560694",
//    "13560694",
//    "3919035",
//    "15714939",
//    "15714939",
//    "10252286",
//    "10252286",
//    "104147070",
//    "104147070",
//    "105531813",
//    "1641260",
//    "18529278",
//    "17704991",
//    "17704991",
//    "104095714",
//    "16854922",
//    "16854922",
//    "17616738",
//    "17616738",
//    "18247681",
//    "18247681",
//    "105530258",
//    "105459594",
//    "105459594",
//    "13371064",
//    "13371064",
//    "18519955",
//    "101564541",
//    "14456273",
//    "14456273",
//    "4193799",
//    "14115847",
//    "14115847",
//    "105313295",
//    "17498853",
//    "104000385",
//    "103899282",
//    "103899282",
//    "105313295",
//    "3721877",
//    "3721877",
//    "18051495",
//    "100842472",
//    "12595052",
//    "12595052",
//    "2758399",
//    "105074207",
//    "104854098",
//    "104854098",
//    "100071553",
//    "100071553",
//    "101850588",
//    "101841586",
//    "101841586",
//    "103761265",
//    "105531855",
//    "101960933",
//    "2094021",
//    "2094021",
//    "103852686",
//    "103852686",
//    "4591787",
//    "4591787",
//    "17631698",
//    "3405679",
//    "3405679",
//    "100282748",
//    "102660685",
//    "102374325",
//    "14222481",
//    "14222481",
//    "100377932",
//    "100377932",
//    "17957662",
//    "16415151",
//    "16415151",
//    "2802242",
//    "15032143",
//    "15032143",
//    "13663883",
//    "102356659",
//    "102356659",
//    "17444300",
//    "17444300",
//    "17452873",
//    "17452873",
//    "105363500",
//    "2693291",
//    "2083315",
//    "102291866",
//    "3914246",
//    "3914246",
  ).distinct
}
