AWSTemplateFormatVersion: '2010-09-09'
Description: Membership Attributes service
Parameters:
  Stage:
    Description: Environment name
    Type: String
    Default: PROD
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MaxInstances:
    Description: Maximum number of instances. This should be (at least) double the
      desired capacity.
    Type: Number
    Default: 12
  MinInstances:
    Description: "Minimum number of instances desired. NOTE: there is a Zuora concurrent call threshold configured in MembershipFeatureToggles-[STAGE] DynamoDB table which will need adjusting if you increase this value."
    Type: Number
    Default: 6
  VpcId:
    Description: ID of the VPC onto which to launch the application
    Type: AWS::EC2::VPC::Id
    Default: vpc-e6e00183
  VpcSubnets:
    Description: Subnets to use in VPC
    Type: CommaDelimitedList
    Default: subnet-cb91ae8d,subnet-a7b74ac2,subnet-179e8063
  AmiId:
    Description: Custom AMI to use for instances
    Type: String
  ELBSSLCertificate:
    Description: ELB SSL Certificate ARN
    Type: String
Mappings:
  StageVariables:
    PROD:
      NotificationAlarmPeriod: 1200
      InstanceName: PROD:membership-attribute-service
      DynamoDBTable: "Memb-Attributes-Tables-PROD-SupporterAttributesFallback"
      DynamoDBTableTestUsers: "Memb-Attributes-Tables-UAT-SupporterAttributesFallback"
      DynamoDBFeatureToggleTable: arn:aws:dynamodb:*:*:table/MembershipFeatureToggles-PROD
      DynamoDBFeatureToggleTableTestUsers: arn:aws:dynamodb:*:*:table/MembershipFeatureToggles-UAT
      ReadableS3Resources:
        - arn:aws:s3:::gu-membership-attribute-service-dist/membership/PROD/*
        - arn:aws:s3:::gu-reader-revenue-private/membership/members-data-api/PROD/*

    CODE:
      NotificationAlarmPeriod: 1200
      InstanceName: CODE:membership-attribute-service
      DynamoDBTable: "Memb-Attributes-Tables-DEV-SupporterAttributesFallback"
      DynamoDBTableTestUsers: "Memb-Attributes-Tables-UAT-SupporterAttributesFallback"
      DynamoDBFeatureToggleTable: arn:aws:dynamodb:*:*:table/MembershipFeatureToggles-DEV
      DynamoDBFeatureToggleTableTestUsers: arn:aws:dynamodb:*:*:table/MembershipFeatureToggles-UAT
      ReadableS3Resources:
        - arn:aws:s3:::gu-membership-attribute-service-dist/membership/CODE/*
        - arn:aws:s3:::gu-reader-revenue-private/membership/members-data-api/CODE/*

Conditions:
  CreateProdMonitoring: !Equals [ !Ref Stage, PROD ]

Resources:
  MembershipRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          # Explicitly deny access to all S3 resources except for those defined in ReadableS3Resources
          # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow
          - Effect: Deny
            Action: s3:*
            NotResource: !FindInMap [StageVariables, !Ref Stage, ReadableS3Resources]
          - Effect: Allow
            Action: s3:GetObject
            Resource: !FindInMap [StageVariables, !Ref Stage, ReadableS3Resources]
          - Action: ec2:DescribeTags
            Resource: "*"
            Effect: Allow
          - Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeTable
            Resource:
              Fn::ImportValue:
                Fn::FindInMap: [ StageVariables, { Ref: Stage }, DynamoDBTable ]
            Effect: Allow
          - Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeTable
            Resource:
              Fn::ImportValue:
                Fn::FindInMap: [ StageVariables, { Ref: Stage }, DynamoDBTableTestUsers ]
            Effect: Allow
          - Action:
            - dynamodb:GetItem
            - dynamodb:DescribeTable
            Resource:
              Fn::FindInMap: [ StageVariables, { Ref: Stage }, DynamoDBFeatureToggleTable ]
            Effect: Allow
          - Action:
            - dynamodb:GetItem
            - dynamodb:DescribeTable
            Resource:
              Fn::FindInMap: [ StageVariables, { Ref: Stage }, DynamoDBFeatureToggleTableTestUsers ]
            Effect: Allow
          - Action:
            - cloudwatch:*
            Resource: "*"
            Effect: Allow
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt MembersDataApiLogGroup.Arn
            Effect: Allow
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: MembershipRole
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: '443'
        InstancePort: '9000'
        Protocol: HTTPS
        SSLCertificateId: !Ref ELBSSLCertificate
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
      CrossZone: 'true'
      HealthCheck:
        Target: HTTP:9000/healthcheck
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      Subnets:
        Ref: VpcSubnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize:
        Ref: MinInstances
      MaxSize:
        Ref: MaxInstances
      HealthCheckType: ELB
      HealthCheckGracePeriod: 400
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
        PropagateAtLaunch: 'true'
      - Key: Name
        Value:
          Fn::FindInMap: [ StageVariables, { Ref: Stage }, InstanceName ]
        PropagateAtLaunch: 'true'
      - Key: Stack
        Value: membership
        PropagateAtLaunch: 'true'
      - Key: App
        Value: membership-attribute-service
        PropagateAtLaunch: 'true'
      - Key: Role
        Value: membership-attribute-service
        PropagateAtLaunch: 'true'
      - Key: Mainclass
        Value: membership-attribute-service
        PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        Ref: VpcSubnets
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AmiId
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      AssociatePublicIpAddress: 'True'
      IamInstanceProfile:
        Ref: InstanceProfile
      UserData:
        "Fn::Base64":
          !Sub
            - |
              #!/bin/bash -ev
              CONF_DIR=/etc/membership-attribute-service
              aws s3 cp s3://gu-membership-attribute-service-dist/membership/${Stage}/membership-attribute-service/membership-attribute-service_1.0-SNAPSHOT_all.deb /tmp
              dpkg -i /tmp/membership-attribute-service_1.0-SNAPSHOT_all.deb
              mkdir -p /etc/gu
              aws --region ${AWS::Region} s3 cp s3://gu-reader-revenue-private/membership/members-data-api/${Stage}/members-data-api.private.conf /etc/gu
              chown membership-attribute-service /etc/gu/members-data-api.private.conf
              chmod 0600 /etc/gu/members-data-api.private.conf

              wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              sed -i -e "s/__DATE/$(date +%F)/" -e 's/__STAGE/${Stage}/' $CONF_DIR/logger.conf
              python awslogs-agent-setup.py -nr ${AWS::Region} -c $CONF_DIR/logger.conf
              systemctl enable awslogs
              systemctl start awslogs
            - {}
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      GroupDescription: Open up HTTPS access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      GroupDescription: Open up HTTP access to load balancer, SSH to office
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  MembersDataApiLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub members-data-api-${Stage}
      RetentionInDays: 14
  MembersDataDefaultPaymentMethodLeftEmptyMetricFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: MembersDataApiLogGroup
    Properties:
      FilterPattern: "\"default-payment-method-lost\""
      LogGroupName: !Sub members-data-api-${Stage}
      MetricTransformations:
      - MetricValue: 1
        MetricNamespace: "members-data-api"
        MetricName: !Sub "${Stage} - Default Payment Method set to nothing"
  MembersDataDefaultPaymentMethodLeftEmptyAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - MembersDataDefaultPaymentMethodLeftEmptyMetricFilter
    - MembersDataApiLogGroup
    Condition: CreateProdMonitoring
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:subscriptions_dev
      AlarmName: !Sub "Default Payment Method set to nothing : members-data-api ${Stage}"
      Dimensions:
      - Name: LogGroup
        Value: !Sub members-data-api-${Stage}
      - Name: Stage
        Value: !Sub ${Stage}
      EvaluationPeriods: 1
      MetricName: !Sub "${Stage} - Default Payment Method set to nothing"
      Namespace: "members-data-api"
      Period: 3600
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  ExpiredTtlAlarm:
        Type: AWS::CloudWatch::Alarm
        Condition: CreateProdMonitoring
        Properties:
          AlarmActions:
          - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:subscriptions_dev
          AlarmName: !Sub Item with expired TTL found in MembershipAttributes-${Stage} Table
          ComparisonOperator: GreaterThanOrEqualToThreshold
          Dimensions:
            - Name: Services
              Value: ScanamoAttributeService
            - Name: Stage
              Value: !Sub ${Stage}
          EvaluationPeriods: 1
          MetricName: Old Dynamo Item
          Namespace: members-data-api
          Period: 60
          Statistic: Sum
          Threshold: 1
Outputs:
  LoadBalancerUrl:
    Value:
      Fn::GetAtt:
      - LoadBalancer
      - DNSName
